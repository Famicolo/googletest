<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1301.v054d9cea_9593">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2133.ve46a_6113dfc3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2133.ve46a_6113dfc3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>provo a costruire una pipeline da solo</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.37.1">
      <projectUrl>https://github.com/Famicolo/googletest/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.37.1">
          <spec></spec>
        </com.cloudbees.jenkins.GitHubPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3668.v1763b_b_6ccffd">
    <script>pipeline{
    agent any
    stages{
        stage(&apos;Prologue&apos;){
            steps{
                sh &apos;echo &quot;Create sudo credentials variable&quot;&apos;
                //withCredentials([string(credentialsId: &apos;sudopwd&apos;, variable: &apos;sudoPwd&apos;)]) {
                // some block
                //}
            }
        }
        
        stage(&apos;Checkout&apos;){
            steps{
                checkout changelog: false, poll: false, scm: scmGit(branches: [[name: &apos;*/main&apos;]], extensions: [], userRemoteConfigs: [[url: &apos;https://github.com/Famicolo/googletest&apos;]])
            }
        }
        
        stage(&apos;Available-Tools control &apos;){
            steps{
                script{
                    //def gppInstalled = sh(returnStatus: true, script: &apos;g++ --version&apos;).isSuccess()
                    //if (!gppInstalled) {
                        //sh &apos;echo ${sudoPwd} | sudo -S apt-get update&apos;
                        //sh &apos;echo ${sudoPwd} | sudo -S apt-get install -y g++&apos;
                    //}
                    //sh &apos;&apos;&apos;
                    //    if ! command -v g++ &amp;&gt; /dev/null; then 
                    //    echo &quot;Il comando g++ not installed.&quot;
                    //    echo &quot;build-essential installation...&quot;
                    //    echo ${sudoPwd} | sudo -S apt-get update
                    //    #echo ${sudoPwd} | sudo -S apt-get install -y g++
                    //    fi
                    //   &apos;&apos;&apos;
                    //sh(returnStatus: true, script: &apos;g++ --version&apos;).isSuccess()
                    //def gppInstalled = hhhhhhhhh
                    //sh &apos;echo ${gppInstalled}&apos;
                    //sh &apos;if command -v ciao &amp;&gt; /dev/null; then echo &quot;installato&quot;; else echo &quot;non installato&quot;;fi&apos;
                    //sh &apos;chmod +x check_tools.sh&apos;
                    //sh &apos;./check_tools.sh&apos;
                    sh &apos;ls&apos;
                    sh &apos;ls&apos;
                    sh &apos;chmod +x check_tools.sh&apos;
                    sh &apos;./check_tools.sh&apos;
                    //sh &apos;sudoPwd=&quot;admin&quot;&apos;
                    //sh &apos;apt-get update&apos;
                    //sh &apos;echo ${sudoPwd} | sudo -S apt-get update&apos;
                    
                
                }
            }
        }
        
        
        
        stage(&apos;results&apos;){
            steps{
                
                sh &apos;echo &quot;Hello World&quot;&apos;
                sh &apos;docker build -t dkr4sweng_test03 .&apos;
                sh &apos;docker run dkr4sweng_test03&apos;
                sh &apos;docker login -u famicolo -p SwengProject&apos;
                sh &apos;docker tag dkr4sweng_test03 famicolo/sweng_project:tesyjenkinsupload&apos;
                sh &apos;docker push famicolo/sweng_project:tesyjenkinsupload&apos;
                //sh &apos;./crash&apos;
            }
        }
        
        stage(&apos;share info&apos;){
            steps{
                slackSend color: &quot;good&quot;, message: &quot;Recently compiled ${env.JOB_NAME}_${env.BUILD_NUMBER}&quot;
            }
            
        }
    }
    
    post {
    failure {
      // Istruzione da eseguire solo in caso di errore
      script {
        slackSend color: &quot;danger&quot;, message: &quot;FAILURE in compiling ${env.JOB_NAME}_${env.BUILD_NUMBER} pipeline&quot;
        // Altre istruzioni da eseguire in caso di errore
      }
    }
  }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>